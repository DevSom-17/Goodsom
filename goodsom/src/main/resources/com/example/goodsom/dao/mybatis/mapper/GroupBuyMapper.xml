<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.example.goodsom.dao.mybatis.mapper.GroupBuyMapper">
  <cache />
  <sql id="BaseColumns_GroupBuys">
  		GROUPBUYID, TITLE, CONTENT, MINNO, UPLOADDATE, ENDDATE, 
  		COUNT, STATE, RATE, PARTICIPANTS, RECEIVE, MENUID, CATID, USERID, PRICE, SENDNOTI
  </sql>

  
  <insert id="createGroupBuy" parameterType="com.example.goodsom.domain.GroupBuy">
  	
  	INSERT INTO GROUPBUYS (TITLE, CONTENT, MINNO, UPLOADDATE, ENDDATE, COUNT,
  			 STATE, RATE, PARTICIPANTS, RECEIVE, MENUID, CATID, USERID, PRICE, SENDNOTI)
	VALUES (#{title}, #{content}, #{minNo}, #{uploadDate}, #{endDate}, 
			#{count}, #{state}, #{rate}, #{participants}, #{receive}, #{menuId}, 
			#{catId}, #{userId}, #{price}, #{sendNoti})
		

  	<selectKey keyProperty="groupBuyId" resultType="int" order="AFTER">
  		SELECT LAST_INSERT_ID()
  	</selectKey>	

  </insert>
  
  <update id="updateGroupBuy" parameterType="com.example.goodsom.domain.GroupBuy" >
   	UPDATE GROUPBUYS
    SET TITLE=#{title}, PRICE=#{price}, CONTENT=#{content}, CATID=#{catId},
    	MINNO=#{minNo}, ENDDATE=#{endDate}
  	WHERE  GROUPBUYID=#{groupBuyId}
	
  </update>

   
  <delete id="deleteGroupBuy" parameterType="java.lang.Integer">
    DELETE FROM GROUPBUYS
    WHERE  GROUPBUYID=#{groupBuyId}
  </delete>
  
  <delete id="deleteGroupBuyByUserId" parameterType="java.lang.Integer">
    DELETE FROM GROUPBUYS
    WHERE  USERID = #{userId}
  </delete>
  
  <insert id="createOptions" parameterType="com.example.goodsom.domain.GroupBuy">
  
  	INSERT INTO OPTIONS (GROUPBUYID, NAME)
  	SELECT A.* FROM (
	  	<foreach collection="optionList" item="option" separator="UNION ALL">
			SELECT  #{groupBuyId}, #{option}
			FROM 	DUAL
		</foreach>
		) A

  </insert>
     
   <delete id="deleteOptions" parameterType="java.lang.Integer">
    DELETE FROM OPTIONS
    WHERE  GROUPBUYID=#{groupBuyId}
  </delete>
  
  <!-- Get all groupBuys -->
  <resultMap id="collectionResultMap" type="com.example.goodsom.domain.GroupBuy">
  	<id column="groupBuyId" jdbcType="INTEGER" property="groupBuyId"/>
  	<result column="title" jdbcType="VARCHAR" property="title"/>
  	<result column="content" jdbcType="VARCHAR" property="content"/>
  	<result column="minNo" jdbcType="INTEGER" property="minNo"/>
  	<result column="uploadDate" jdbcType="TIMESTAMP" property="uploadDate"/>
  	<result column="endDate" jdbcType="TIMESTAMP" property="endDate"/>
  	<result column="count" jdbcType="INTEGER" property="count"/>
  	<result column="state" jdbcType="VARCHAR" property="state"/>
  	<result column="rate" jdbcType="INTEGER" property="rate"/>
  	<result column="participants" jdbcType="INTEGER" property="participants"/>
  	<result column="catId" jdbcType="INTEGER" property="catId"/>
  	<result column="menuId" jdbcType="INTEGER" property="menuId"/>
  	<result column="userId" jdbcType="INTEGER" property="userId"/>
  	<result column="price" jdbcType="INTEGER" property="price"/>
  	<result column="sendNoti" jdbcType="INTEGER" property="sendNoti"/>
  	
  	<collection property="options" ofType="com.example.goodsom.domain.Option">
  		<id property="optionId" column="optionId"/>
  		<result property="groupBuyId" column="groupBuyId"/>
  		<result property="name" column="name"/>
  	</collection>
  	<collection property="imgs_g" javaType="java.util.ArrayList" ofType="com.example.goodsom.domain.Image_g"
  			column="groupBuyId=groupBuyId" select="com.example.goodsom.dao.mybatis.mapper.FileMapper.getGroupBuyImgs">
  	</collection>
  </resultMap> 
  <select id="getGroupBuy" parameterType="java.lang.Integer" resultMap="collectionResultMap">
    SELECT g.GROUPBUYID, g.TITLE, g.CONTENT, g.MINNO, g.UPLOADDATE, g.ENDDATE, 
  			g.COUNT, g.STATE, g.RATE, g.PARTICIPANTS, g.MENUID, g.CATID, g.USERID, g.PRICE, g.sendNoti,
    		op.OPTIONID, op.GROUPBUYID, op.NAME
    FROM GROUPBUYS AS g
    INNER JOIN OPTIONS AS op
    ON g.GROUPBUYID = op.GROUPBUYID
    WHERE g.GROUPBUYID = #{groupBuyId}
  </select>
  
  <!-- 
   <select id="getGroupBuy" resultType="GroupBuy" parameterType="java.lang.Integer">
    SELECT * FROM GROUPBUYS
    WHERE GROUPBUYID = #{groupBuyId}
  </select>
 -->
 
  <select id="getGroupBuyList" resultMap="collectionResultMap">
    SELECT <include refid="BaseColumns_GroupBuys" />
    FROM GROUPBUYS
    ORDER BY UPLOADDATE DESC
  </select>
  
  <!-- Get all groupBuys by userId (작성한 공구 게시글 목록 보기) -->
    <select id="getGroupBuyListByUserId" parameterType="java.lang.Integer" resultMap="collectionResultMap">
    SELECT <include refid="BaseColumns_GroupBuys" />
    FROM GROUPBUYS
    WHERE userId = #{userId}
    ORDER BY groupBuyId DESC
  </select>
  
   <!-- Search groupBuy by Keyword -->
  <select id="getGroupBuyListByKeyword" resultMap="collectionResultMap">
  	<bind name="pattern" value="'%' + _parameter + '%'" />
	  	SELECT <include refid="BaseColumns_GroupBuys" />
    	FROM GROUPBUYS
	    WHERE title LIKE #{pattern}
	    ORDER BY UPLOADDATE DESC
  </select>
  
  <update id="increaseCount" parameterType="com.example.goodsom.domain.GroupBuy">
  	UPDATE GROUPBUYS
  	SET COUNT=#{count}+1
  	WHERE GROUPBUYID=#{groupBuyId}
  </update>
  
  <update id="updateParticipants" parameterType="com.example.goodsom.domain.GroupBuy">
  	UPDATE GROUPBUYS
  	SET PARTICIPANTS=#{participants}, RATE=#{rate}, STATE=#{state}
  	WHERE GROUPBUYID=#{groupBuyId}
  </update>
  
  <!-- 스케줄러: 공동구매 마감 -->
  <update id="closeEvent">
    <![CDATA[
     UPDATE GROUPBUYS SET STATE = 'closed'
     WHERE (ENDDATE - now()) <= 0 AND STATE != 'closed'
    ]]>
  </update>
  
  <!-- 스케줄러: 공동구매 성사 / 진행중일때만  -->
  <update id="achieveEvent">
    <![CDATA[
     UPDATE GROUPBUYS SET STATE = 'achieved'
     WHERE participants >= minNo AND STATE = 'proceeding'
    ]]>
  </update>
  
  <!-- 성사된 공동구매 알림 -->
  <select id="getGroupBuyIdForAchieveNoti" resultType="Integer">
	  	SELECT groupBuyId
    	FROM GROUPBUYS
	    WHERE STATE = 'achieved' AND sendNoti=0
  </select>
  <!-- 마감된 공동구매 알림 -->
  <select id="getGroupBuyIdForCloseNoti" resultType="Integer">
	  	SELECT groupBuyId
    	FROM GROUPBUYS
	    WHERE STATE = 'closed' AND sendNoti != 2
  </select>
  
  <!-- 알림을 보낸 후
  		알림을 보내지 않음: sendNoti=0
  		성사 알림을 보낸 상태: sendNoti=1
		마감 알림을 보낸 상태: sendNoti=2-->
  <update id="updateAchieveNoti" parameterType="Integer">
  	UPDATE GROUPBUYS
  	SET sendNoti=1
  	WHERE GROUPBUYID=#{groupBuyId}
  </update>
  <update id="updateCloseNoti" parameterType="Integer">
  	UPDATE GROUPBUYS
  	SET sendNoti=2
  	WHERE GROUPBUYID=#{groupBuyId}
  </update>
  
  <select id="getRecentGroupBuyList" resultType="com.example.goodsom.domain.GroupBuy">
   <![CDATA[
    SELECT EX1.* FROM
    	(SELECT * FROM GROUPBUYS
    	 ORDER BY COUNT DESC) EX1
    LIMIT 3
   ]]>
  </select>
  
  <select id="getLikedGroupBuyListByUserId" parameterType="Integer" resultMap="collectionResultMap">
    SELECT <include refid="BaseColumns_GroupBuys" />
    FROM GROUPBUYS
    WHERE GROUPBUYID IN (SELECT GROUPBUYID FROM LIKES_G WHERE USERID = 1) 
    ORDER BY UPLOADDATE DESC
  </select>
</mapper>